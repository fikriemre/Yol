
using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Xml.Linq;

namespace yol
{
    public partial class Form1 : Form
    {
        List<double> points = new List<double>();
        List<float> PRadius = new List<float>();
        List<double> PCurves = new List<double>();
        List<double> Clenghts = new List<double>();
        List<bool> C_Cws = new List<bool>();
        List<double> DuseyPoints = new List<double>();
        float basx2, basy2;
        private List<Kesit> kesitler;
        FormPopup EKSform;
        PointF[] pp;
        PointF k_point;
        PointF p1;
        PointF p2;
        string globalnameKSE;
        string globalname = "";
        double KMO = 0;
        double X_offset = 0;
        double Y_offset = 0;
        string tempdata = "*0*0.0000000*72.5790000*EKS*0*9.5000000*72.5790000*YKA*0*20.5000000*73.0190000*YKA1*0*21.5000000*72.9390000*YKA2*0*24.5000000*72.1890000*HDA*0*27.5000000*74.1890000*SBA*#*0*-27.5000000*73.1760000*SBO*0*-24.5000000*71.1760000*HDO*0*-21.5000000*71.9260000*YKO2*0*-20.5000000*72.0060000*YKO1*0*-9.5000000*72.4460000*YKO*0*0.0000000*72.4460000*EKS*0*9.5000000*72.4460000*YKA*0*20.5000000*72.8860000*YKA1*0*21.5000000*72.8060000*YKA2*0*24.5000000*72.0560000*HDA*0*27.5000000*74.0560000*SBA*#*0*-27.5000000*73.0360000*SBO*0*-24.5000000*71.0360000*HDO*0*-21.5000000*71.7860000*YKO2*0*-20.5000000*71.8660000*YKO1*0*-9.5000000*72.3060000*YKO*0*0.0000000*72.3060000*EKS*0*9.5000000*72.3060000*YKA*0*20.5000000*72.7460000*YKA1*0*21.5000000*72.6660000*YKA2*0*24.5000000*71.9160000*HDO*0*27.5000000*73.9160000*SBO*#*0*-27.5000000*72.8890000*SBO*0*-24.5000000*70.8890000*HDO*0*-21.5000000*71.6390000*YKO2*0*-20.5000000*71.7190000*YKO1*0*-9.5000000*72.1590000*YKO*0*0.0000000*72.1590000*EKS*0*9.5000000*72.1590000*YKA*0*20.5000000*72.5990000*YKA1*0*21.5000000*72.5190000*YKA2*0*23.5000000*71.5190000*SDA*#*0*-27.5000000*72.7340000*SBO*0*-24.5000000*70.7340000*HDO*0*-21.5000000*71.4840000*YKO2*0*-20.5000000*71.5640000*YKO1*0*-9.5000000*72.0040000*YKO*0*0.0000000*72.0040000*EKS*0*9.5000000*72.0040000*YKA*0*20.5000000*72.4440000*YKA1*0*21.5000000*72.3640000*YKA2*0*23.5000000*71.3640000*SDA*#*0*-23.5000000*70.3210000*SDO*0*-21.5000000*71.3210000*YKO2*0*-20.5000000*71.4010000*YKO1*0*-9.5000000*71.8410000*YKO*0*0.0000000*71.8410000*EKS*0*9.5000000*71.8410000*YKA*0*20.5000000*72.2810000*YKA1*0*21.5000000*72.2010000*YKA2*0*23.5000000*71.2010000*SDA*#*0*-23.5000000*70.1510000*SDO*0*-21.5000000*71.1510000*YKO2*0*-20.5000000*71.2310000*YKO1*0*-9.5000000*71.6710000*YKO*0*0.0000000*71.6710000*EKS*0*9.5000000*71.6710000*YKA*0*20.5000000*72.1110000*YKA1*0*21.5000000*72.0310000*YKA2*0*23.5000000*71.0310000*SDA*#*0*-23.5000000*69.9740000*SDO*0*-21.5000000*70.9740000*YKO2*0*-20.5000000*71.0540000*YKO1*0*-9.5000000*71.4940000*YKO*0*0.0000000*71.4940000*EKS*0*9.5000000*71.4940000*YKA*0*20.5000000*71.9340000*YKA1*0*21.5000000*71.8540000*YKA2*0*23.5000000*70.8540000*SDA*#*0*-23.5000000*69.7890000*SDO*0*-21.5000000*70.7890000*YKO2*0*-20.5000000*70.8690000*YKO1*0*-9.5000000*71.3090000*YKO*0*0.0000000*71.3090000*EKS*0*9.5000000*71.3090000*YKA*0*20.5000000*71.7490000*YKA1*0*21.5000000*71.6690000*YKA2*0*23.5000000*70.6690000*SDA*#*0*-23.5000000*69.5960000*SDO*0*-21.5000000*70.5960000*YKO2*0*-20.5000000*70.6760000*YKO1*0*-9.5000000*71.1160000*YKO*0*0.0000000*71.1160000*EKS*0*9.5000000*71.1160000*YKA*0*20.5000000*71.5560000*YKA1*0*21.5000000*71.4760000*YKA2*0*23.5000000*70.4760000*SDA*#*0*-23.5000000*69.3960000*SDO*0*-21.5000000*70.3960000*YKO2*0*-20.5000000*70.4760000*YKO1*0*-9.5000000*70.9160000*YKO*0*0.0000000*70.9160000*EKS*0*9.5000000*70.9160000*YKA*0*20.5000000*71.3560000*YKA1*0*21.5000000*71.2760000*YKA2*0*23.5000000*70.2760000*SDA*#*0*-23.5000000*69.1890000*SDO*0*-21.5000000*70.1890000*YKO2*0*-20.5000000*70.2690000*YKO1*0*-9.5000000*70.7090000*YKO*0*0.0000000*70.7090000*EKS*0*9.5000000*70.7090000*YKA*0*20.5000000*71.1490000*YKA1*0*21.5000000*71.0690000*YKA2*0*23.5000000*70.0690000*SDA*#*0*-23.5000000*68.9740000*SDO*0*-21.5000000*69.9740000*YKO2*0*-20.5000000*70.0540000*YKO1*0*-9.5000000*70.4940000*YKO*0*0.0000000*70.4940000*EKS*0*9.5000000*70.4940000*YKA*0*20.5000000*70.9340000*YKA1*0*21.5000000*70.8540000*YKA2*0*23.5000000*69.8540000*SDA*#*0*-23.5000000*68.7510000*SDO*0*-21.5000000*69.7510000*YKO2*0*-20.5000000*69.8310000*YKO1*0*-9.5000000*70.2710000*YKO*0*0.0000000*70.2710000*EKS*0*9.5000000*70.2710000*YKA*0*20.5000000*70.7110000*YKA1*0*21.5000000*70.6310000*YKA2*0*23.5000000*69.6310000*SDA*#*0*-23.5000000*68.5210000*SDO*0*-21.5000000*69.5210000*YKO2*0*-20.5000000*69.6010000*YKO1*0*-9.5000000*70.0410000*YKO*0*0.0000000*70.0410000*EKS*0*9.5000000*70.0410000*YKA*0*20.5000000*70.4810000*YKA1*0*21.5000000*70.4010000*YKA2*0*23.5000000*69.4010000*SDA*#*0*-23.5000000*68.2840000*SDO*0*-21.5000000*69.2840000*YKO2*0*-20.5000000*69.3640000*YKO1*0*-9.5000000*69.8040000*YKO*0*0.0000000*69.8040000*EKS*0*9.5000000*69.8040000*YKA*0*20.5000000*70.2440000*YKA1*0*21.5000000*70.1640000*YKA2*0*23.5000000*69.1640000*SDA*#*0*-23.5000000*68.0390000*SDO*0*-21.5000000*69.0390000*YKO2*0*-20.5000000*69.1190000*YKO1*0*-9.5000000*69.5590000*YKO*0*0.0000000*69.5590000*EKS*0*9.5000000*69.5590000*YKA*0*20.5000000*69.9990000*YKA1*0*21.5000000*69.9190000*YKA2*0*23.5000000*68.9190000*SDA*#*0*-23.5000000*67.7860000*SDO*0*-21.5000000*68.7860000*YKO2*0*-20.5000000*68.8660000*YKO1*0*-9.5000000*69.3060000*YKO*0*0.0000000*69.3060000*EKS*0*9.5000000*69.3060000*YKA*0*20.5000000*69.7460000*YKA1*0*21.5000000*69.6660000*YKA2*0*23.5000000*68.6660000*SDA*#*0*-23.5000000*67.5260000*SDO*0*-21.5000000*68.5260000*YKO2*0*-20.5000000*68.6060000*YKO1*0*-9.5000000*69.0460000*YKO*0*0.0000000*69.0460000*EKS*0*9.5000000*69.0460000*YKA*0*20.5000000*69.4860000*YKA1*0*21.5000000*69.4060000*YKA2*0*23.5000000*68.4060000*SDA*#*0*-23.5000000*67.2590000*SDO*0*-21.5000000*68.2590000*YKO2*0*-20.5000000*68.3390000*YKO1*0*-9.5000000*68.7790000*YKO*0*0.0000000*68.7790000*EKS*0*9.5000000*68.7790000*YKA*0*20.5000000*69.2190000*YKA1*0*21.5000000*69.1390000*YKA2*0*23.5000000*68.1390000*SDA*#*0*-23.5000000*66.9840000*SDO*0*-21.5000000*67.9840000*YKO2*0*-20.5000000*68.0640000*YKO1*0*-9.5000000*68.5040000*YKO*0*0.0000000*68.5040000*EKS*0*9.5000000*68.5040000*YKA*0*20.5000000*68.9440000*YKA1*0*21.5000000*68.8640000*YKA2*0*23.5000000*67.8640000*SDA*#*0*-23.5000000*66.7010000*SDO*0*-21.5000000*67.7010000*YKO2*0*-20.5000000*67.7810000*YKO1*0*-9.5000000*68.2210000*YKO*0*0.0000000*68.2210000*EKS*0*9.5000000*68.2210000*YKA*0*20.5000000*68.6610000*YKA1*0*21.5000000*68.5810000*YKA2*0*23.5000000*67.5810000*SDA*#*0*-23.5000000*66.4110000*SDO*0*-21.5000000*67.4110000*YKO2*0*-20.5000000*67.4910000*YKO1*0*-9.5000000*67.9310000*YKO*0*0.0000000*67.9310000*EKS*0*9.5000000*67.9310000*YKA*0*20.5000000*68.3710000*YKA1*0*21.5000000*68.2910000*YKA2*0*23.5000000*67.2910000*SDA*#*0*-23.5000000*66.1140000*SDO*0*-21.5000000*67.1140000*YKO2*0*-20.5000000*67.1940000*YKO1*0*-9.5000000*67.6340000*YKO*0*0.0000000*67.6340000*EKS*0*9.5000000*67.6340000*YKA*0*20.5000000*68.0740000*YKA1*0*21.5000000*67.9940000*YKA2*0*23.5000000*66.9940000*SDA*#*0*-23.5000000*65.8090000*SDO*0*-21.5000000*66.8090000*YKO2*0*-20.5000000*66.8890000*YKO1*0*-9.5000000*67.3290000*YKO*0*0.0000000*67.3290000*EKS*0*9.5000000*67.3290000*YKA*0*20.5000000*67.7690000*YKA1*0*21.5000000*67.6890000*YKA2*0*23.5000000*66.6890000*SDA*#*0*-23.5000000*65.4960000*SDO*0*-21.5000000*66.4960000*YKO2*0*-20.5000000*66.5760000*YKO1*0*-9.5000000*67.0160000*YKO*0*0.0000000*67.0160000*EKS*0*9.5000000*67.0160000*YKA*0*20.5000000*67.4560000*YKA1*0*21.5000000*67.3760000*YKA2*0*23.5000000*66.3760000*SDA*#*0*-26.5000000*67.5060000*YBO*0*-23.5000000*65.5060000*HDO*0*-20.5000000*66.2560000*YKO1*0*-9.5000000*66.6960000*YKO*0*0.0000000*66.6960000*EKS*0*9.5000000*66.6960000*YKA*0*20.5000000*67.1360000*YKA1*0*21.5000000*67.0560000*YKA2*0*23.5000000*66.0560000*SDA*#*0*-27.5000000*67.0990000*SBO*0*-24.5000000*65.0990000*HDO*0*-21.5000000*65.8490000*YKO2*0*-20.5000000*65.9290000*YKO1*0*-9.5000000*66.3690000*YKO*0*0.0000000*66.3690000*EKS*0*9.5000000*66.3690000*YKA*0*20.5000000*66.8090000*YKA1*0*21.5000000*66.7290000*YKA2*0*23.5000000*65.7290000*SDA*#*0*-27.5000000*66.7640000*SBO*0*-24.5000000*64.7640000*HDO*0*-21.5000000*65.5140000*YKO2*0*-20.5000000*65.5940000*YKO1*0*-9.5000000*66.0340000*YKO*0*0.0000000*66.0340000*EKS*0*9.5000000*66.0340000*YKA*0*20.5000000*66.4740000*YKA1*0*21.5000000*66.3940000*YKA2*0*23.5000000*65.3940000*SDA*#*0*-23.5000000*64.1710000*SDO*0*-21.5000000*65.1710000*YKO2*0*-20.5000000*65.2510000*YKO1*0*-9.5000000*65.6910000*YKO*0*0.0000000*65.6910000*EKS*0*9.5000000*65.6910000*YKA*0*20.5000000*66.1310000*YKA1*0*21.5000000*66.0510000*YKA2*0*23.5000000*65.0510000*SDA*#*0*-23.5000000*63.8220000*SDO*0*-21.5000000*64.8220000*YKO2*0*-20.5000000*64.9020000*YKO1*0*-9.5000000*65.3420000*YKO*0*0.0000000*65.3420000*EKS*0*9.5000000*65.3420000*YKA*0*20.5000000*65.7820000*YKA1*0*21.5000000*65.7020000*YKA2*0*23.5000000*64.7020000*SDA*#*0*-23.5000000*63.4720000*SDO*0*-21.5000000*64.4720000*YKO2*0*-20.5000000*64.5520000*YKO1*0*-9.5000000*64.9920000*YKO*0*0.0000000*64.9920000*EKS*0*9.5000000*64.9920000*YKA*0*20.5000000*65.4320000*YKA1*0*21.5000000*65.3520000*YKA2*0*23.5000000*64.3520000*SDA*#*0*-20.5001000*59.2680000*SDO*0*-20.5000000*64.2680000*YKO1*0*-9.5000000*64.6420000*YKO*0*0.0000000*64.6420000*EKS*0*9.5000000*64.6420000*YKA*0*20.5000000*65.0160000*YKA1*0*20.5001000*60.0160000*SDA*#*0*-20.5001000*58.9530000*SDO*0*-20.5000000*63.9530000*YKO1*0*-9.5000000*64.3270000*YKO*0*0.0000000*64.3270000*EKS*0*9.5200000*64.3270000*YKA*0*20.5200000*64.7010000*YKA1*0*20.5201000*59.7010000*SDA*#*0*-20.5001000*58.9180000*SDO*0*-20.5000000*63.9180000*YKO1*0*-9.5000000*64.2920000*YKO*0*0.0000000*64.2920000*EKS*0*9.5300000*64.2920000*YKA*0*20.5300000*64.6660000*YKA1*0*20.5301000*59.6660000*SDA*#*0*-20.5601000*58.6340000*SDO*0*-20.5600000*63.6340000*YKO1*0*-9.5600000*63.9420000*YKO*0*0.0000000*63.9420000*EKS*0*9.6000000*63.9420000*YKA*0*20.6000000*64.2500000*YKA1*0*20.6001000*59.2500000*SDA*#*0*-20.6301000*58.3500000*SDO*0*-20.6300000*63.3500000*YKO1*0*-9.6300000*63.5920000*YKO*0*0.0000000*63.5920000*EKS*0*9.6700000*63.5920000*YKA*0*20.6700000*63.8340000*YKA1*0*20.6701000*58.8340000*SDA*#*0*-20.7101000*58.0660000*SDO*0*-20.7100000*63.0660000*YKO1*0*-9.7100000*63.2420000*YKO*0*0.0000000*63.2420000*EKS*0*9.7400000*63.2420000*YKA*0*20.7400000*63.4180000*YKA1*0*20.7401000*58.4180000*SDA*#*0*-23.7900000*61.7020000*SDO*0*-21.7900000*62.7020000*YKO2*0*-20.7900000*62.7820000*YKO1*0*-9.7900000*62.8920000*YKO*0*0.0000000*62.8920000*EKS*0*9.8100000*62.8920000*YKA*0*20.8100000*63.0020000*YKA1*0*21.8100000*62.9220000*YKA2*0*23.8100000*61.9220000*SDA*#*0*-20.8701000*57.4320000*SDO*0*-20.8700000*62.4320000*YKO1*0*-9.8700000*62.5420000*YKO*0*0.0000000*62.5420000*EKS*0*9.8800000*62.5420000*YKA*0*20.8800000*62.5860000*YKA1*0*21.8800000*62.5060000*YKA2*0*23.8800000*61.5060000*SDA*#*0*-20.9501000*57.0820000*SDO*0*-20.9500000*62.0820000*YKO1*0*-9.9500000*62.1920000*YKO*0*0.0000000*62.1920000*EKS*0*9.9500000*62.1920000*YKA*0*20.9500000*62.1700000*YKA1*0*23.9500000*61.4200000*HDA*0*26.9500000*63.4200000*SBA*#*0*-21.0201000*56.9520000*SDO*0*-21.0200000*61.9520000*YKO1*0*-10.0200000*61.8420000*YKO*0*0.0000000*61.8420000*EKS*0*10.0200000*61.8420000*YKA*0*21.0200000*61.7540000*YKA1*0*24.0200000*61.0040000*HDA*0*27.0200000*63.0040000*SBA*#*0*-21.1001000*56.6460000*SDO*0*-21.1000000*61.6460000*YKO1*0*-10.1000000*61.4920000*YKO*0*0.0000000*61.4920000*EKS*0*10.0900000*61.4920000*YKA*0*21.0900000*61.3380000*YKA1*0*24.0900000*60.5880000*HDA*0*27.0900000*62.5880000*SBA*#*0*-24.1800000*60.2820000*SDO*0*-22.1800000*61.2820000*YKO2*0*-21.1800000*61.3620000*YKO1*0*-10.1800000*61.1420000*YKO*0*0.0000000*61.1420000*EKS*0*10.1600000*61.1420000*YKA*0*21.1600000*60.9220000*YKA1*0*24.1600000*60.1720000*HDA*0*27.1600000*62.1720000*SBA*#*0*-24.2600000*59.9980000*SDO*0*-22.2600000*60.9980000*YKO2*0*-21.2600000*61.0780000*YKO1*0*-10.2600000*60.7920000*YKO*0*0.0000000*60.7920000*EKS*0*10.2300000*60.7920000*YKA*0*21.2300000*60.5060000*YKA1*0*24.2300000*59.7560000*HDA*0*27.2300000*61.7560000*SBA*#*0*-24.3300000*59.7140000*SDO*0*-22.3300000*60.7140000*YKO2*0*-21.3300000*60.7940000*YKO1*0*-10.3300000*60.4420000*YKO*0*0.0000000*60.4420000*EKS*0*10.3000000*60.4420000*YKA*0*21.3000000*60.0900000*YKA1*0*24.3000000*59.3400000*HDA*0*27.3000000*61.3400000*SBA*#*0*-24.3000000*59.4300000*SDO*0*-22.3000000*60.4300000*YKO2*0*-21.3000000*60.5100000*YKO1*0*-10.3000000*60.0920000*YKO*0*0.0000000*60.0920000*EKS*0*10.3700000*60.0920000*YKA*0*21.3700000*59.6740000*YKA1*0*24.3700000*58.9240000*HDA*0*27.3700000*60.9240000*SBA*#*0*-24.0600000*59.1460000*SDO*0*-22.0600000*60.1460000*YKO2*0*-21.0600000*60.2260000*YKO1*0*-10.0600000*59.7420000*YKO*0*0.0000000*59.7420000*EKS*0*10.4400000*59.7420000*YKA*0*21.4400000*59.2580000*YKA1*0*24.4400000*58.5080000*HDA*0*27.4400000*60.5080000*SBA*#*0*-23.9300000*59.0390000*SDO*0*-21.9300000*60.0390000*YKO2*0*-20.9300000*60.1190000*YKO1*0*-9.9300000*59.6130000*YKO*0*0.0000000*59.6130000*EKS*0*10.4700000*59.6130000*YKA*0*21.4700000*59.1070000*YKA1*0*22.4700000*59.0270000*YKA2*0*24.4700000*58.0270000*SDA*#*0*-23.6600000*58.8620000*SDO*0*-21.6600000*59.8620000*YKO2*0*-20.6600000*59.9420000*YKO1*0*-9.6600000*59.3920000*YKO*0*0.0000000*59.3920000*EKS*0*10.4700000*59.3920000*YKA*0*21.4700000*58.8420000*YKA1*0*22.4700000*58.7620000*YKA2*0*24.4700000*57.7620000*SDA*#*0*-23.2500000*58.5340000*SDO*0*-21.2500000*59.5340000*YKO2*0*-20.2500000*59.6140000*YKO1*0*-9.2500000*59.0420000*YKO*0*0.0000000*59.0420000*EKS*0*10.3100000*59.0420000*YKA*0*21.3100000*58.4700000*YKA1*0*22.3100000*58.3900000*YKA2*0*24.3100000*57.3900000*SDA*#*0*-22.8200000*58.2060000*SDO*0*-20.8200000*59.2060000*YKO2*0*-19.8200000*59.2860000*YKO1*0*-8.8200000*58.6920000*YKO*0*0.0000000*58.6920000*EKS*0*9.9700000*58.6920000*YKA*0*20.9700000*58.0980000*YKA1*0*21.9700000*58.0180000*YKA2*0*23.9700000*57.0180000*SDA*#*0*-22.3600000*57.8560000*SDO*0*-20.3600000*58.8560000*YKO2*0*-19.3600000*58.9360000*YKO1*0*-8.3600000*58.3420000*YKO*0*0.0000000*58.3420000*EKS*0*9.4100000*58.3420000*YKA*0*20.4100000*57.7480000*YKA1*0*21.4100000*57.6680000*YKA2*0*23.4100000*56.6680000*SDA*#*0*-21.9500000*57.5060000*SDO*0*-19.9500000*58.5060000*YKO2*0*-18.9500000*58.5860000*YKO1*0*-7.9500000*57.9920000*YKO*0*0.0000000*57.9920000*EKS*0*8.6800000*57.9920000*YKA*0*19.6800000*57.3980000*YKA1*0*20.6800000*57.3180000*YKA2*0*22.6800000*56.3180000*SDA*#*0*-21.5100000*57.1560000*SDO*0*-19.5100000*58.1560000*YKO2*0*-18.5100000*58.2360000*YKO1*0*-7.5100000*57.6420000*YKO*0*0.0000000*57.6420000*EKS*0*7.9400000*57.6420000*YKA*0*18.9400000*57.0480000*YKA1*0*19.9400000*56.9680000*YKA2*0*21.9400000*55.9680000*SDA*#*0*-18.0701000*52.8860000*SDO*0*-18.0700000*57.8860000*YKO1*0*-7.0700000*57.2920000*YKO*0*0.0000000*57.2920000*EKS*0*7.2100000*57.2920000*YKA*0*18.2100000*56.6980000*YKA1*0*18.2101000*51.6980000*SDA*#*0*-17.6201000*52.5360000*SDO*0*-17.6200000*57.5360000*YKO1*0*-6.6200000*56.9420000*YKO*0*0.0000000*56.9420000*EKS*0*6.5500000*56.9420000*YKA*0*17.5500000*56.3480000*YKA1*0*17.5501000*51.3480000*SDA*#*0*-17.1801000*52.1860000*SDO*0*-17.1800000*57.1860000*YKO1*0*-6.1800000*56.5920000*YKO*0*0.0000000*56.5920000*EKS*0*5.9100000*56.5920000*YKA*0*16.9100000*55.9980000*YKA1*0*16.9101000*50.9980000*SDA*#*0*-16.7301000*51.8360000*SDO*0*-16.7300000*56.8360000*YKO1*0*-5.7300000*56.2420000*YKO*0*0.0000000*56.2420000*EKS*0*5.3300000*56.2420000*YKA*0*16.3300000*55.6480000*YKA1*0*16.3301000*50.6480000*SDA*#*0*-16.2801000*51.4860000*SDO*0*-16.2800000*56.4860000*YKO1*0*-5.2800000*55.8920000*YKO*0*0.0000000*55.8920000*EKS*0*4.7900000*55.8920000*YKA*0*15.7900000*55.2980000*YKA1*0*15.7901000*50.2980000*SDA*#*0*-15.8301000*51.1360000*SDO*0*-15.8300000*56.1360000*YKO1*0*-4.8300000*55.5420000*YKO*0*0.0000000*55.5420000*EKS*0*4.3000000*55.5420000*YKA*0*15.3000000*54.9480000*YKA1*0*15.3001000*49.9480000*SDA*#*0*-15.3601000*50.7860000*SDO*0*-15.3600000*55.7860000*YKO1*0*-4.3600000*55.1920000*YKO*0*0.0000000*55.1920000*EKS*0*3.8600000*55.1920000*YKA*0*14.8600000*54.5980000*YKA1*0*14.8601000*49.5980000*SDA*#*0*-14.9001000*50.4360000*SDO*0*-14.9000000*55.4360000*YKO1*0*-3.9000000*54.8420000*YKO*0*0.0000000*54.8420000*EKS*0*3.4700000*54.8420000*YKA*0*14.4700000*54.2480000*YKA1*0*14.4701000*49.2480000*SDA*#*0*-17.4400000*54.0060000*SDO*0*-15.4400000*55.0060000*YKO2*0*-14.4400000*55.0860000*YKO1*0*-3.4400000*54.4920000*YKO*0*0.0000000*54.4920000*EKS*0*3.1100000*54.4920000*YKA*0*14.1100000*53.8980000*YKA1*0*15.1100000*53.8180000*YKA2*0*17.1100000*52.8180000*SDA*#*0*-16.9700000*53.6560000*SDO*0*-14.9700000*54.6560000*YKO2*0*-13.9700000*54.7360000*YKO1*0*-2.9700000*54.1420000*YKO*0*0.0000000*54.1420000*EKS*0*2.8200000*54.1420000*YKA*0*13.8200000*53.5480000*YKA1*0*14.8200000*53.4680000*YKA2*0*16.8200000*52.4680000*SDA*#*0*-16.5100000*53.3060000*SDO*0*-14.5100000*54.3060000*YKO2*0*-13.5100000*54.3860000*YKO1*0*-2.5100000*53.7920000*YKO*0*0.0000000*53.7920000*EKS*0*2.5600000*53.7920000*YKA*0*13.5600000*53.1980000*YKA1*0*14.5600000*53.1180000*YKA2*0*16.5600000*52.1180000*SDA*#*0*-16.1600000*52.9560000*SDO*0*-14.1600000*53.9560000*YKO2*0*-13.1600000*54.0360000*YKO1*0*-2.1600000*53.4420000*YKO*0*0.0000000*53.4420000*EKS*0*2.3500000*53.4420000*YKA*0*13.3500000*52.8480000*YKA1*0*14.3500000*52.7680000*YKA2*0*16.3500000*51.7680000*SDA*#*0*-16.0100000*52.6060000*SDO*0*-14.0100000*53.6060000*YKO2*0*-13.0100000*53.6860000*YKO1*0*-2.0100000*53.0920000*YKO*0*0.0000000*53.0920000*EKS*0*2.1900000*53.0920000*YKA*0*13.1900000*52.4980000*YKA1*0*14.1900000*52.4180000*YKA2*0*16.1900000*51.4180000*SDA*#*0*-16.0000000*52.2560000*SDO*0*-14.0000000*53.2560000*YKO2*0*-13.0000000*53.3360000*YKO1*0*-2.0000000*52.7420000*YKO*0*0.0000000*52.7420000*EKS*0*2.0800000*52.7420000*YKA*0*13.0800000*52.1480000*YKA1*0*14.0800000*52.0680000*YKA2*0*16.0800000*51.0680000*SDA*#*0*-16.0000000*51.9060000*SDO*0*-14.0000000*52.9060000*YKO2*0*-13.0000000*52.9860000*YKO1*0*-2.0000000*52.3920000*YKO*0*0.0000000*52.3920000*EKS*0*2.0200000*52.3920000*YKA*0*13.0200000*51.7980000*YKA1*0*14.0200000*51.7180000*YKA2*0*16.0200000*50.7180000*SDA*#*0*-16.0000000*51.5560000*SDO*0*-14.0000000*52.5560000*YKO2*0*-13.0000000*52.6360000*YKO1*0*-2.0000000*52.0420000*EKS*0*0.0000000*51.5420000*HDO*0*2.0000000*52.0420000*EKS*0*13.0000000*51.4480000*YKA1*0*14.0000000*51.3680000*YKA2*0*16.0000000*50.3680000*SDA*#*0*-16.0000000*51.2060000*SDO*0*-14.0000000*52.2060000*YKO2*0*-13.0000000*52.2860000*YKO1*0*-2.0000000*51.6920000*EKS*0*0.0000000*51.1920000*HDO*0*2.0000000*51.6920000*EKS*0*13.0000000*51.0980000*YKA1*0*14.0000000*51.0180000*YKA2*0*16.0000000*50.0180000*SDA*#*0*-16.0000000*50.8560000*SDO*0*-14.0000000*51.8560000*YKO2*0*-13.0000000*51.9360000*YKO1*0*-2.0000000*51.3420000*EKS*0*0.0000000*50.8420000*HDO*0*2.0000000*51.3420000*EKS*0*13.0000000*50.7480000*YKA1*0*14.0000000*50.6680000*YKA2*0*16.0000000*49.6680000*SDA*#*0*-16.0000000*50.5060000*SDO*0*-14.0000000*51.5060000*YKO2*0*-13.0000000*51.5860000*YKO1*0*-2.0000000*50.9920000*EKS*0*0.0000000*50.4920000*HDO*0*2.0000000*50.9920000*EKS*0*13.0000000*50.3980000*YKA1*0*14.0000000*50.3180000*YKA2*0*16.0000000*49.3180000*SDA*#*0*-16.0000000*50.1560000*SDO*0*-14.0000000*51.1560000*YKO2*0*-13.0000000*51.2360000*YKO1*0*-2.0000000*50.6420000*EKS*0*0.0000000*50.1420000*HDO*0*2.0000000*50.6420000*EKS*0*13.0000000*50.0480000*YKA1*0*14.0000000*49.9680000*YKA2*0*16.0000000*48.9680000*SDA*#*0*-16.0000000*49.8060000*SDO*0*-14.0000000*50.8060000*YKO2*0*-13.0000000*50.8860000*YKO1*0*-2.0000000*50.2920000*EKS*0*0.0000000*49.7920000*HDO*0*2.0000000*50.2920000*EKS*0*13.0000000*49.6980000*YKA1*0*14.0000000*49.6180000*YKA2*0*16.0000000*48.6180000*SDA*#*0*-16.0000000*49.4560000*SDO*0*-14.0000000*50.4560000*YKO2*0*-13.0000000*50.5360000*YKO1*0*-2.0000000*49.9420000*EKS*0*0.0000000*49.4420000*HDO*0*2.0000000*49.9420000*EKS*0*13.0000000*49.3480000*YKA1*0*14.0000000*49.2680000*YKA2*0*16.0000000*48.2680000*SDA*#*0*-13.0001000*45.1860000*SDO*0*-13.0000000*50.1860000*YKO1*0*-2.0000000*49.5920000*EKS*0*-1.9999000*44.5920000*SDA*0*1.9999000*44.5920000*SDO*0*2.0000000*49.5920000*EKS*0*13.0000000*48.9980000*YKA1*0*13.0001000*43.9980000*SDA*#*0*-13.0001000*44.8360000*SDO*0*-13.0000000*49.8360000*YKO1*0*-2.0000000*49.2420000*EKS*0*-1.9999000*44.2420000*SDA*0*1.9999000*44.2420000*SDO*0*2.0000000*49.2420000*EKS*0*13.0000000*48.6480000*YKA1*0*13.0001000*43.6480000*SDA*#*0*-13.0001000*44.4860000*SDO*0*-13.0000000*49.4860000*YKO1*0*-2.0000000*48.8920000*EKS*0*-1.9999000*43.8920000*SDA*0*1.9999000*43.8920000*SDO*0*2.0000000*48.8920000*EKS*0*13.0000000*48.2980000*YKA1*0*13.0001000*43.2980000*SDA*#*0*-13.0001000*44.1360000*SDO*0*-13.0000000*49.1360000*YKO1*0*-2.0000000*48.5420000*EKS*0*-1.9999000*43.5420000*SDA*0*1.9999000*43.5420000*SDO*0*2.0000000*48.5420000*EKS*0*13.0000000*47.9480000*YKA1*0*13.0001000*42.9480000*SDA*#*0*-13.0001000*43.7860000*SDO*0*-13.0000000*48.7860000*YKO1*0*-2.0000000*48.1920000*EKS*0*-1.9999000*43.1920000*SDA*0*1.9999000*43.1920000*SDO*0*2.0000000*48.1920000*EKS*0*13.0000000*47.5980000*YKA1*0*13.0001000*42.5980000*SDA*#*0*-13.0001000*43.4360000*SDO*0*-13.0000000*48.4360000*YKO1*0*-2.0000000*47.8420000*EKS*0*-1.9999000*42.8420000*SDA*0*1.9999000*42.8420000*SDO*0*2.0000000*47.8420000*EKS*0*13.0000000*47.2480000*YKA1*0*13.0001000*42.2480000*SDA*#*0*-16.0000000*47.0060000*SDO*0*-14.0000000*48.0060000*YKO2*0*-13.0000000*48.0860000*YKO1*0*-2.0000000*47.4920000*EKS*0*0.0000000*46.9920000*HDO*0*2.0000000*47.4920000*EKS*0*13.0000000*46.8980000*YKA1*0*16.0000000*46.1480000*HDA*0*22.0000000*50.1480000*SBA*#*0*-16.0000000*46.6560000*SDO*0*-14.0000000*47.6560000*YKO2*0*-13.0000000*47.7360000*YKO1*0*-2.0000000*47.1420000*EKS*0*0.0000000*46.6420000*HDO*0*2.0000000*47.1420000*EKS*0*13.0000000*46.5480000*YKA1*0*16.0000000*45.7980000*HDA*0*22.0000000*49.7980000*SBA*#*0*-16.0000000*46.3060000*SDO*0*-14.0000000*47.3060000*YKO2*0*-13.0000000*47.3860000*YKO1*0*-2.0000000*46.7920000*EKS*0*0.0000000*46.2920000*HDO*0*2.0000000*46.7920000*EKS*0*13.0000000*46.1980000*YKA1*0*16.0000000*45.4480000*HDA*0*22.0000000*49.4480000*SBA*#*0*-16.0000000*45.9560000*SDO*0*-14.0000000*46.9560000*YKO2*0*-13.0000000*47.0360000*YKO1*0*-2.0000000*46.4420000*EKS*0*0.0000000*45.9420000*HDO*0*2.0000000*46.4420000*EKS*0*13.0000000*45.8480000*YKA1*0*16.0000000*45.0980000*HDA*0*22.0000000*49.0980000*SBA*#*0*-18.0000000*48.9360000*SBO*0*-16.0000000*45.9360000*HDO*0*-13.0000000*46.6860000*YKO1*0*-2.0000000*46.0920000*EKS*0*0.0000000*45.5920000*HDO*0*2.0000000*46.0920000*EKS*0*13.0000000*45.4980000*YKA1*0*16.0000000*44.7480000*HDA*0*22.0000000*48.7480000*SBA*#*0*-18.0000000*48.5860000*SBO*0*-16.0000000*45.5860000*HDO*0*-13.0000000*46.3360000*YKO1*0*-2.0000000*45.7420000*EKS*0*0.0000000*45.2420000*HDO*0*2.0000000*45.7420000*EKS*0*13.0000000*45.1480000*YKA1*0*16.0000000*44.3980000*HDA*0*22.0000000*48.3980000*SBA*#*0*-18.0000000*48.2360000*SBO*0*-16.0000000*45.2360000*HDO*0*-13.0000000*45.9860000*YKO1*0*-2.0000000*45.3920000*EKS*0*0.0000000*44.8920000*HDO*0*2.0000000*45.3920000*EKS*0*13.0000000*44.7980000*YKA1*0*16.0000000*44.0480000*HDA*0*22.0000000*48.0480000*SBA*#*0*-16.0000000*44.5560000*SDO*0*-14.0000000*45.5560000*YKO2*0*-13.0000000*45.6360000*YKO1*0*-2.0000000*45.0420000*EKS*0*0.0000000*44.5420000*HDO*0*2.0000000*45.0420000*EKS*0*13.0000000*44.4480000*YKA1*0*16.0000000*43.6980000*HDA*0*22.0000000*47.6980000*SBA*#*0*-16.0000000*44.2060000*SDO*0*-14.0000000*45.2060000*YKO2*0*-13.0000000*45.2860000*YKO1*0*-2.0000000*44.6920000*EKS*0*0.0000000*44.1920000*HDO*0*2.0000000*44.6920000*EKS*0*13.0000000*44.0980000*YKA1*0*16.0000000*43.3480000*HDA*0*22.0000000*47.3480000*SBA*#*0*-16.0000000*43.8560000*SDO*0*-14.0000000*44.8560000*YKO2*0*-13.0000000*44.9360000*YKO1*0*-2.0000000*44.3420000*EKS*0*0.0000000*43.8420000*HDO*0*2.0000000*44.3420000*EKS*0*13.0000000*43.7480000*YKA1*0*16.0000000*42.9980000*HDA*0*22.0000000*46.9980000*SBA*#*0*-16.0000000*43.5060000*SDO*0*-14.0000000*44.5060000*YKO2*0*-13.0000000*44.5860000*YKO1*0*-2.0000000*43.9920000*EKS*0*0.0000000*43.4920000*HDO*0*2.0000000*43.9920000*EKS*0*13.0000000*43.3980000*YKA1*0*14.0000000*43.3180000*YKA2*0*16.0000000*42.3180000*SDA*#*0*-16.0000000*43.1560000*SDO*0*-14.0000000*44.1560000*YKO2*0*-13.0000000*44.2360000*YKO1*0*-2.0000000*43.6420000*EKS*0*0.0000000*43.1420000*HDO*0*2.0000000*43.6420000*EKS*0*13.0000000*43.0480000*YKA1*0*14.0000000*42.9680000*YKA2*0*16.0000000*41.9680000*SDA*#*0*-16.0000000*42.8060000*SDO*0*-14.0000000*43.8060000*YKO2*0*-13.0000000*43.8860000*YKO1*0*-2.0000000*43.2920000*EKS*0*0.0000000*42.7920000*HDO*0*2.0000000*43.2920000*EKS*0*13.0000000*42.6980000*YKA1*0*14.0000000*42.6180000*YKA2*0*16.0000000*41.6180000*SDA*#*0*-16.0000000*42.4560000*SDO*0*-14.0000000*43.4560000*YKO2*0*-13.0000000*43.5360000*YKO1*0*-2.0000000*42.9420000*EKS*0*0.0000000*42.4420000*HDO*0*2.0000000*42.9420000*EKS*0*13.0000000*42.3480000*YKA1*0*14.0000000*42.2680000*YKA2*0*16.0000000*41.2680000*SDA*#*0*-16.0000000*42.1060000*SDO*0*-14.0000000*43.1060000*YKO2*0*-13.0000000*43.1860000*YKO1*0*-2.0000000*42.5920000*EKS*0*0.0000000*42.0920000*HDO*0*2.0000000*42.5920000*EKS*0*13.0000000*41.9980000*YKA1*0*14.0000000*41.9180000*YKA2*0*16.0000000*40.9180000*SDA*#*0*-16.0000000*41.7560000*SDO*0*-14.0000000*42.7560000*YKO2*0*-13.0000000*42.8360000*YKO1*0*-2.0000000*42.2420000*EKS*0*0.0000000*41.7420000*HDO*0*2.0000000*42.2420000*EKS*0*13.0000000*41.6480000*YKA1*0*14.0000000*41.5680000*YKA2*0*16.0000000*40.5680000*SDA*#*0*-16.0000000*41.4060000*SDO*0*-14.0000000*42.4060000*YKO2*0*-13.0000000*42.4860000*YKO1*0*-2.0000000*41.8920000*EKS*0*0.0000000*41.3920000*HDO*0*2.0000000*41.8920000*EKS*0*13.0000000*41.2980000*YKA1*0*14.0000000*41.2180000*YKA2*0*16.0000000*40.2180000*SDA*#*0*-16.0000000*41.0560000*SDO*0*-14.0000000*42.0560000*YKO2*0*-13.0000000*42.1360000*YKO1*0*-2.0000000*41.5420000*EKS*0*0.0000000*41.0420000*HDO*0*2.0000000*41.5420000*EKS*0*13.0000000*40.9480000*YKA1*0*14.0000000*40.8680000*YKA2*0*16.0000000*39.8680000*SDA*#*0*-16.0000000*40.7060000*SDO*0*-14.0000000*41.7060000*YKO2*0*-13.0000000*41.7860000*YKO1*0*-2.0000000*41.1920000*EKS*0*0.0000000*40.6920000*HDO*0*2.0000000*41.1920000*EKS*0*13.0000000*40.5980000*YKA1*0*14.0000000*40.5180000*YKA2*0*16.0000000*39.5180000*SDA*#*0*-16.0000000*40.3560000*SDO*0*-14.0000000*41.3560000*YKO2*0*-13.0000000*41.4360000*YKO1*0*-2.0000000*40.8420000*EKS*0*0.0000000*40.3420000*HDO*0*2.0000000*40.8420000*EKS*0*13.0000000*40.2480000*YKA1*0*14.0000000*40.1680000*YKA2*0*16.0000000*39.1680000*SDA*#*0*-16.0000000*40.0060000*SDO*0*-14.0000000*41.0060000*YKO2*0*-13.0000000*41.0860000*YKO1*0*-2.0000000*40.4920000*EKS*0*0.0000000*39.9920000*HDO*0*2.0000000*40.4920000*EKS*0*13.0000000*39.8980000*YKA1*0*14.0000000*39.8180000*YKA2*0*16.0000000*38.8180000*SDA*#*0*-16.0000000*39.6560000*SDO*0*-14.0000000*40.6560000*YKO2*0*-13.0000000*40.7360000*YKO1*0*-2.0000000*40.1420000*EKS*0*0.0000000*39.6420000*HDO*0*2.0000000*40.1420000*EKS*0*13.0000000*39.5480000*YKA1*0*14.0000000*39.4680000*YKA2*0*16.0000000*38.4680000*SDA*#*0*-16.0000000*39.3060000*SDO*0*-14.0000000*40.3060000*YKO2*0*-13.0000000*40.3860000*YKO1*0*-2.0000000*39.7920000*EKS*0*0.0000000*39.2920000*HDO*0*2.0000000*39.7920000*EKS*0*13.0000000*39.1980000*YKA1*0*16.0000000*38.4480000*HDA*0*22.0000000*42.4480000*SBA*#*0*-16.0000000*38.9560000*SDO*0*-14.0000000*39.9560000*YKO2*0*-13.0000000*40.0360000*YKO1*0*-2.0000000*39.4420000*EKS*0*0.0000000*38.9420000*HDO*0*2.0000000*39.4420000*EKS*0*13.0000000*38.8480000*YKA1*0*16.0000000*38.0980000*HDA*0*22.0000000*42.0980000*SBA*#*0*-16.0000000*38.6060000*SDO*0*-14.0000000*39.6060000*YKO2*0*-13.0000000*39.6860000*YKO1*0*-2.0000000*39.0920000*EKS*0*0.0000000*38.5920000*HDO*0*2.0000000*39.0920000*EKS*0*13.0000000*38.4980000*YKA1*0*14.0000000*38.4180000*YKA2*0*16.0000000*37.4180000*SDA*#*0*-13.0001000*34.3360000*SDO*0*-13.0000000*39.3360000*YKO1*0*-2.0000000*38.7420000*EKS*0*-1.9999000*33.7420000*SDA*0*1.9999000*33.7420000*SDO*0*2.0000000*38.7420000*EKS*0*13.0000000*38.1480000*YKA1*0*13.0001000*33.1480000*SDA*#*0*-13.0001000*33.9860000*SDO*0*-13.0000000*38.9860000*YKO1*0*-2.0000000*38.3920000*EKS*0*-1.9999000*33.3920000*SDA*0*1.9999000*33.3920000*SDO*0*2.0000000*38.3920000*EKS*0*13.0000000*37.7980000*YKA1*0*13.0001000*32.7980000*SDA*#*0*-13.0001000*33.6360000*SDO*0*-13.0000000*38.6360000*YKO1*0*-2.0000000*38.0420000*EKS*0*-1.9999000*33.0420000*SDA*0*1.9999000*33.0420000*SDO*0*2.0000000*38.0420000*EKS*0*13.0000000*37.4480000*YKA1*0*13.0001000*32.4480000*SDA*#*0*-13.0001000*33.2860000*SDO*0*-13.0000000*38.2860000*YKO1*0*-2.0000000*37.6920000*EKS*0*-1.9999000*32.6920000*SDA*0*1.9999000*32.6920000*SDO*0*2.0000000*37.6920000*EKS*0*13.0000000*37.0980000*YKA1*0*13.0001000*32.0980000*SDA*#*0*-13.0001000*32.9360000*SDO*0*-13.0000000*37.9360000*YKO1*0*-2.0000000*37.3420000*EKS*0*-1.9999000*32.3420000*SDA*0*1.9999000*32.3420000*SDO*0*2.0000000*37.3420000*EKS*0*13.0000000*36.7480000*YKA1*0*13.0001000*31.7480000*SDA*#*0*-13.0001000*32.5860000*SDO*0*-13.0000000*37.5860000*YKO1*0*-2.0000000*36.9920000*EKS*0*-1.9999000*31.9920000*SDA*0*1.9999000*31.9920000*SDO*0*2.0000000*36.9920000*EKS*0*13.0000000*36.3980000*YKA1*0*13.0001000*31.3980000*SDA*#*0*-13.0001000*32.2360000*SDO*0*-13.0000000*37.2360000*YKO1*0*-2.0000000*36.6420000*EKS*0*-1.9999000*31.6420000*SDA*0*1.9999000*31.6420000*SDO*0*2.0000000*36.6420000*EKS*0*13.0000000*36.0480000*YKA1*0*13.0001000*31.0480000*SDA*#*0*-16.0000000*35.8070000*SDO*0*-14.0000000*36.8070000*YKO2*0*-13.0000000*36.8870000*YKO1*0*-2.0000000*36.2930000*EKS*0*0.0000000*35.7930000*HDO*0*2.0000000*36.2930000*EKS*0*13.0000000*35.6990000*YKA1*0*14.0000000*35.6190000*YKA2*0*16.0000000*34.6190000*SDA*#*0*-13.0001000*31.5410000*SDO*0*-13.0000000*36.5410000*YKO1*0*-2.0000000*35.9470000*EKS*0*-1.9999000*30.9470000*SDA*0*1.9999000*30.9470000*SDO*0*2.0000000*35.9470000*EKS*0*13.0000000*35.3530000*YKA1*0*13.0001000*30.3530000*SDA*#*0*-13.0001000*31.2000000*SDO*0*-13.0000000*36.2000000*YKO1*0*-2.0000000*35.6060000*EKS*0*-1.9999000*30.6060000*SDA*0*1.9999000*30.6060000*SDO*0*2.0000000*35.6060000*EKS*0*13.0000000*35.0120000*YKA1*0*13.0001000*30.0120000*SDA*#*0*-13.0001000*30.8630000*SDO*0*-13.0000000*35.8630000*YKO1*0*-2.0000000*35.2690000*EKS*0*-1.9999000*30.2690000*SDA*0*1.9999000*30.2690000*SDO*0*2.0000000*35.2690000*EKS*0*13.0000000*34.6750000*YKA1*0*13.0001000*29.6750000*SDA*#*0*-13.0001000*30.5310000*SDO*0*-13.0000000*35.5310000*YKO1*0*-2.0000000*34.9370000*EKS*0*-1.9999000*29.9370000*SDA*0*1.9999000*29.9370000*SDO*0*2.0000000*34.9370000*EKS*0*13.0000000*34.3430000*YKA1*0*13.0001000*29.3430000*SDA*#*0*-13.0001000*30.2030000*SDO*0*-13.0000000*35.2030000*YKO1*0*-2.0000000*34.6090000*EKS*0*-1.9999000*29.6090000*SDA*0*1.9999000*29.6090000*SDO*0*2.0000000*34.6090000*EKS*0*13.0000000*34.0150000*YKA1*0*13.0001000*29.0150000*SDA*#*0*-13.0001000*29.8800000*SDO*0*-13.0000000*34.8800000*YKO1*0*-2.0000000*34.2860000*EKS*0*-1.9999000*29.2860000*SDA*0*1.9999000*29.2860000*SDO*0*2.0000000*34.2860000*EKS*0*13.0000000*33.6920000*YKA1*0*13.0001000*28.6920000*SDA*#*0*-13.0001000*29.5610000*SDO*0*-13.0000000*34.5610000*YKO1*0*-2.0000000*33.9670000*EKS*0*-1.9999000*28.9670000*SDA*0*1.9999000*28.9670000*SDO*0*2.0000000*33.9670000*EKS*0*13.0000000*33.3730000*YKA1*0*13.0001000*28.3730000*SDA*#*0*-16.0000000*33.1670000*SDO*0*-14.0000000*34.1670000*YKO2*0*-13.0000000*34.2470000*YKO1*0*-2.0000000*33.6530000*EKS*0*0.0000000*33.1530000*HDO*0*2.0000000*33.6530000*EKS*0*13.0000000*33.0590000*YKA1*0*16.0000000*32.3090000*HDA*0*22.0000000*36.3090000*SBA*#*0*-16.0000000*32.8570000*SDO*0*-14.0000000*33.8570000*YKO2*0*-13.0000000*33.9370000*YKO1*0*-2.0000000*33.3430000*EKS*0*0.0000000*32.8430000*HDO*0*2.0000000*33.3430000*EKS*0*13.0000000*32.7490000*YKA1*0*16.0000000*31.9990000*HDA*0*22.0000000*35.9990000*SBA*#*0*-16.0000000*32.5510000*SDO*0*-14.0000000*33.5510000*YKO2*0*-13.0000000*33.6310000*YKO1*0*-2.0000000*33.0370000*EKS*0*0.0000000*32.5370000*HDO*0*2.0000000*33.0370000*EKS*0*13.0000000*32.4430000*YKA1*0*16.0000000*31.6930000*HDA*0*22.0000000*35.6930000*SBA*#*0*-16.0000000*32.2500000*SDO*0*-14.0000000*33.2500000*YKO2*0*-13.0000000*33.3300000*YKO1*0*-2.0000000*32.7360000*EKS*0*0.0000000*32.2360000*HDO*0*2.0000000*32.7360000*EKS*0*13.0000000*32.1420000*YKA1*0*16.0000000*31.3920000*HDA*0*22.0000000*35.3920000*SBA*#*0*-16.0000000*31.9530000*SDO*0*-14.0000000*32.9530000*YKO2*0*-13.0000000*33.0330000*YKO1*0*-2.0000000*32.4390000*EKS*0*0.0000000*31.9390000*HDO*0*2.0000000*32.4390000*EKS*0*13.0000000*31.8450000*YKA1*0*16.0000000*31.0950000*HDA*0*22.0000000*35.0950000*SBA*#*0*-16.0000000*31.6610000*SDO*0*-14.0000000*32.6610000*YKO2*0*-13.0000000*32.7410000*YKO1*0*-2.0000000*32.1470000*EKS*0*0.0000000*31.6470000*HDO*0*2.0000000*32.1470000*EKS*0*13.0000000*31.5530000*YKA1*0*16.0000000*30.8030000*HDA*0*22.0000000*34.8030000*SBA*#*0*-16.0000000*31.3730000*SDO*0*-14.0000000*32.3730000*YKO2*0*-13.0000000*32.4530000*YKO1*0*-2.0000000*31.8590000*EKS*0*0.0000000*31.3590000*HDO*0*2.0000000*31.8590000*EKS*0*13.0000000*31.2650000*YKA1*0*14.0000000*31.1850000*YKA2*0*16.0000000*30.1850000*SDA*#*0*-16.0000000*31.0900000*SDO*0*-14.0000000*32.0900000*YKO2*0*-13.0000000*32.1700000*YKO1*0*-2.0000000*31.5760000*EKS*0*0.0000000*31.0760000*HDO*0*2.0000000*31.5760000*EKS*0*13.0000000*30.9820000*YKA1*0*14.0000000*30.9020000*YKA2*0*16.0000000*29.9020000*SDA*#*0*-16.0000000*30.7890000*SDO*0*-14.0000000*31.7890000*YKO2*0*-13.0000000*31.8690000*YKO1*0*-2.0000000*31.2970000*EKS*0*0.0000000*30.7970000*HDO*0*2.0000000*31.2970000*EKS*0*13.0000000*30.7250000*YKA1*0*14.0000000*30.6450000*YKA2*0*16.0000000*29.6450000*SDA*#*0*-16.0000000*30.4600000*SDO*0*-14.0000000*31.4600000*YKO2*0*-13.0000000*31.5400000*YKO1*0*-2.0000000*31.0230000*EKS*0*0.0000000*30.5230000*HDO*0*2.0000000*31.0230000*EKS*0*13.0000000*30.5060000*YKA1*0*14.0000000*30.4260000*YKA2*0*16.0000000*29.4260000*SDA*#*0*-16.0000000*30.4530000*SDO*0*-14.0000000*31.4530000*YKO2*0*-13.0000000*31.5330000*YKO1*0*-2.0000000*31.0160000*EKS*0*0.0000000*30.5160000*HDO*0*2.0000000*31.0160000*EKS*0*13.0000000*30.4990000*YKA1*0*14.0000000*30.4190000*YKA2*0*16.0000000*29.4190000*SDA*#*0*-16.0000000*30.1240000*SDO*0*-14.0000000*31.1240000*YKO2*0*-13.0000000*31.2040000*YKO1*0*-2.0000000*30.7530000*EKS*0*0.0000000*30.2530000*HDO*0*2.0000000*30.7530000*EKS*0*13.0000000*30.3020000*YKA1*0*14.0000000*30.2220000*YKA2*0*16.0000000*29.2220000*SDA*#*0*-16.0000000*29.7975000*SDO*0*-14.0000000*30.7975000*YKO2*0*-13.0000000*30.8775000*YKO1*0*-2.0000000*30.4870000*EKS*0*0.0000000*29.9870000*HDO*0*2.0000000*30.4870000*EKS*0*13.0000000*30.0965000*YKA1*0*14.0000000*30.0165000*YKA2*0*16.0000000*29.0165000*SDA*#*0*-16.0000000*29.4760000*SDO*0*-14.0000000*30.4760000*YKO2*0*-13.0000000*30.5560000*YKO1*0*-2.0000000*30.2260000*EKS*0*0.0000000*29.7260000*HDO*0*2.0000000*30.2260000*EKS*0*13.0000000*29.8960000*YKA1*0*14.0000000*29.8160000*YKA2*0*16.0000000*28.8160000*SDA*#*0*-16.0000000*29.1585000*SDO*0*-14.0000000*30.1585000*YKO2*0*-13.0000000*30.2385000*YKO1*0*-2.0000000*29.9690000*EKS*0*0.0000000*29.4690000*HDO*0*2.0000000*29.9690000*EKS*0*13.0000000*29.6995000*YKA1*0*14.0000000*29.6195000*YKA2*0*16.0000000*28.6195000*SDA*#*0*-16.0000000*28.8460000*SDO*0*-14.0000000*29.8460000*YKO2*0*-13.0000000*29.9260000*YKO1*0*-2.0000000*29.7170000*EKS*0*0.0000000*29.2170000*HDO*0*2.0000000*29.7170000*EKS*0*13.0000000*29.5080000*YKA1*0*14.0000000*29.4280000*YKA2*0*16.0000000*28.4280000*SDA*#*0*-16.0000000*28.5375000*SDO*0*-14.0000000*29.5375000*YKO2*0*-13.0000000*29.6175000*YKO1*0*-2.0000000*29.4690000*EKS*0*0.0000000*28.9690000*HDO*0*2.0000000*29.4690000*EKS*0*13.0000000*29.3205000*YKA1*0*14.0000000*29.2405000*YKA2*0*16.0000000*28.2405000*SDA*#*0*-16.0000000*28.2340000*SDO*0*-14.0000000*29.2340000*YKO2*0*-13.0000000*29.3140000*YKO1*0*-2.0000000*29.2260000*EKS*0*0.0000000*28.7260000*HDO*0*2.0000000*29.2260000*EKS*0*13.0000000*29.1380000*YKA1*0*14.0000000*29.0580000*YKA2*0*16.0000000*28.0580000*SDA*#*0*-16.0000000*27.9345000*SDO*0*-14.0000000*28.9345000*YKO2*0*-13.0000000*29.0145000*YKO1*0*-2.0000000*28.9870000*EKS*0*0.0000000*28.4870000*HDO*0*2.0000000*28.9870000*EKS*0*13.0000000*28.9595000*YKA1*0*14.0000000*28.8795000*YKA2*0*16.0000000*27.8795000*SDA*#*0*-16.0000000*27.6400000*SDO*0*-14.0000000*28.6400000*YKO2*0*-13.0000000*28.7200000*YKO1*0*-2.0000000*28.7530000*EKS*0*0.0000000*28.2530000*HDO*0*2.0000000*28.7530000*EKS*0*13.0000000*28.7860000*YKA1*0*14.0000000*28.7060000*YKA2*0*16.0000000*27.7060000*SDA*#*0*-16.0000000*27.3495000*SDO*0*-14.0000000*28.3495000*YKO2*0*-13.0000000*28.4295000*YKO1*0*-2.0000000*28.5230000*EKS*0*0.0000000*28.0230000*HDO*0*2.0000000*28.5230000*EKS*0*13.0000000*28.6165000*YKA1*0*14.0000000*28.5365000*YKA2*0*16.0000000*27.5365000*SDA*#*0*-16.0000000*27.0630000*SDO*0*-14.0000000*28.0630000*YKO2*0*-13.0000000*28.1430000*YKO1*0*-2.0000000*28.2970000*EKS*0*0.0000000*27.7970000*HDO*0*2.0000000*28.2970000*EKS*0*13.0000000*28.4510000*YKA1*0*14.0000000*28.3710000*YKA2*0*16.0000000*27.3710000*SDA*"
            ;


        float[] noktalarint;
        float[] noktalarint2;
        float[] scales = { 0.1f, 0.2f, 0.5f, 0.7f, 1, 1.5f, 2, 5, 10, 20, 40, 50 };
        int defscale = 4;
        float offsety = 0;
        float offsetx = 0;


        public Form1()
        {
            InitializeComponent();
            CreateGraphics();
            //System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US", false);
            System.Threading.Thread.CurrentThread.CurrentUICulture = new System.Globalization.CultureInfo("en-US", false);




        }

        public void starter()
        {
            read_file();
            //if (read_file() == 1)
            //{
            //  write_file();
            // return;
            // }
        }
        private void Form1_Paint(object sender, PaintEventArgs e)
        {

            Random rnd = new Random();
            int v = rnd.Next(500);

            System.Drawing.Pen pen = new System.Drawing.Pen(System.Drawing.Color.Red);
            System.Drawing.Pen pen2 = new System.Drawing.Pen(System.Drawing.Color.Blue);
            System.Drawing.Pen pen3 = new System.Drawing.Pen(System.Drawing.Color.Green);

            /*e.Graphics.DrawRectangle(pen2, new System.Drawing.Rectangle(0, 0, v, 500));
            e.Graphics.DrawArc(pen, new System.Drawing.Rectangle(0, 0, v, 500), 90, 90);*/

            /*if (noktalarint != null)
            {
                for (int i = 0; i < noktalarint.Length - 3; i += 2)
                {
                    e.Graphics.DrawLine(pen, (noktalarint[i] * scales[defscale]) + offsetx, (noktalarint[i + 1] * scales[defscale]) + offsety,
                        (noktalarint[i + 2] * scales[defscale]) + offsetx, (noktalarint[i + 3] * scales[defscale]) + offsety);
                }
            }

            if (noktalarint2 != null)
            {
                for (int i = 0; i < noktalarint2.Length - 3; i += 2)
                {
                    e.Graphics.DrawLine(pen2, (noktalarint2[i] * scales[defscale]) + offsetx, (noktalarint2[i + 1] * scales[defscale]) + offsety,
                         (noktalarint2[i + 2] * scales[defscale]) + offsetx, (noktalarint2[i + 3] * scales[defscale]) + offsety);
                }
            }*/
            if (points != null)
            {
                for (int i = 0; i < points.Count - 2; i += 2)
                {
                    e.Graphics.DrawLine(pen3, ((float)points[i] * scales[defscale]) + offsetx, ((float)points[i + 1] * scales[defscale]) + offsety,
                        ((float)points[i + 2] * scales[defscale]) + offsetx, ((float)points[i + 3] * scales[defscale]) + offsety);
                }
            }
            if (PCurves != null)
            {

                for (int i = 0; i < PCurves.Count - 2; i += 2)
                {

                    e.Graphics.DrawLine(pen2, ((float)PCurves[i] * scales[defscale]) + offsetx, ((float)PCurves[i + 1] * scales[defscale]) + offsety, ((float)PCurves[i + 2] * scales[defscale]) + offsetx, ((float)PCurves[i + 3] * scales[defscale]) + offsety);

                }
            }

        }
        void updateGraphic()
        {
            this.Invalidate();
        }

        private void button1_Click(object sender, System.EventArgs e)
        {

        }


        void noktalariduzelt()
        {
            float basx = noktalarint[0];
            basx2 = noktalarint[0];
            float basy = noktalarint[1];
            basy2 = noktalarint[1];

            for (int i = 2; i < noktalarint.Length - 1; i += 2)
            {
                noktalarint[i] = noktalarint[i] - basx;
                noktalarint[i + 1] = noktalarint[i + 1] - basy;
            }
            X_offset = noktalarint[0];
            Y_offset = noktalarint[1];
            noktalarint[0] = 0;
            noktalarint[1] = 0;
        }

        void noktalariduzelt2()
        {


            for (int i = 0; i < noktalarint2.Length - 1; i += 2)
            {
                noktalarint2[i] = noktalarint2[i] - basx2;
                noktalarint2[i + 1] = noktalarint2[i + 1] - basy2;
            }

        }

        private void richTextBox2_TextChanged(object sender, EventArgs e)
        {

        }


        private void Form1_MouseUp(object sender, MouseEventArgs e)
        {

            if (e.Button == MouseButtons.Middle)
            {
                double gosterx = e.X + X_offset;
                double gostery = e.Y + Y_offset;
                label4.Text = gosterx.ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + "   " + gostery.ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture);
            }
            else
            {
                if (p1 == PointF.Empty) p1 = e.Location;
                else if (p2 == PointF.Empty)
                {
                    p2 = e.Location;

                    double sonuc = ((p2.X - p1.X) * (p2.X - p1.X)) + ((p2.Y - p1.Y) * (p2.Y - p1.Y));

                    sonuc = Math.Sqrt(sonuc);


                    sonuc = sonuc / scales[defscale];
                    label1.Text = sonuc.ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture);
                    p1 = PointF.Empty;
                    p2 = PointF.Empty;
                }
            }

        }

        private void button3_Click(object sender, EventArgs e)
        {
            defscale--;
            if (defscale < 0) defscale = 0;
            updateGraphic();
        }

        private void button4_Click(object sender, EventArgs e)
        {
            defscale++;
            if (defscale == scales.Length) defscale = scales.Length - 1;

            updateGraphic();
        }

        private void button_alt_Click(object sender, EventArgs e)
        {
            offsety = offsety - trackBar1.Value;
            updateGraphic();
        }

        private void button_sag_Click(object sender, EventArgs e)
        {
            offsetx = offsetx + trackBar1.Value;
            updateGraphic();
        }

        private void button_ust_Click(object sender, EventArgs e)
        {

            offsety = offsety + trackBar1.Value;
            updateGraphic();
        }

        private void button_sol_Click(object sender, EventArgs e)
        {
            offsetx = offsetx - trackBar1.Value;
            updateGraphic();
        }

        private void button_rest_Click(object sender, EventArgs e)
        {
            offsetx = offsetx - k_point.X;
            offsety = offsety - k_point.Y;
            updateGraphic();
        }



        private void Read_Path(object sender, EventArgs e)
        {
            string _path = PathTextBox.Text;
            string readText;
            if (File.Exists(_path))
            {
                ReadPathButton.Text = "Dosya bulundu";
                readText = File.ReadAllText(_path);
                globalname = _path.Split('\\')[_path.Split('\\').Length - 1];
            }
            else { ReadPathButton.Text = "Dosya yok"; return; }
            string[] readData = readText.Split('\n');
            bool getpoints = false;
            bool _KMO = false;
            bool _dusey = false;
            int eklenti = 0;

            List<string> pointsTextArray = new List<string>();
            points = new List<double>();
            PCurves = new List<double>();

            for (int i = 0; i < readData.Length; i++)
            {
                if (readData[i].StartsWith("$KM0")) { _KMO = true; continue; }
                if (readData[i].StartsWith("$YATAY")) { getpoints = true; continue; }
                if (readData[i].StartsWith("$DUSEY")) { _dusey = true; continue; }
                if (readData[i].StartsWith("$SON")) { getpoints = false; _KMO = false; _dusey = false; continue; }
                if (getpoints)
                {
                    pointsTextArray.Add(readData[i]);
                }
                if (_KMO)
                {
                    readData[i] = readData[i].Replace('.', ',');

                    KMO = double.Parse(readData[i]);
                }
                if (_dusey)
                {
                    eklenti = 0;
                    readData[i] = readData[i].Replace('.', ',');
                    readData[i] = System.Text.RegularExpressions.Regex.Replace(readData[i], @"\s+", "*");
                    string[] _Dbuffer = readData[i].Split('*');
                    for (int t = 0 + eklenti; t < 3 + eklenti; t++)
                    {
                        DuseyPoints.Add(double.Parse(_Dbuffer[t]));
                    }

                }

            }
            for (int i = 0; i < pointsTextArray.Count; i++)
            {
                string data = pointsTextArray[i];
                data = data.Replace('.', ',');
                string[] dataarr;
                dataarr = data.Split(' ');
                points.Add(double.Parse(dataarr[2]));
                points.Add(double.Parse(dataarr[1]));

                if (dataarr[3] == null) { PRadius.Add(0.0f); } else { PRadius.Add(float.Parse(dataarr[3])); }

            }
            //points = new PointF[readData.Length - 1];
            double basx = points[0];
            X_offset = points[0];
            double basy = points[1];
            Y_offset = points[1];

            for (int i = 2; i < points.Count - 1; i += 2)
            {
                points[i] = points[i] - basx;
                points[i + 1] = points[i + 1] - basy;
            }
            points[0] = 0;
            points[1] = 0;

            if ((points.Count / 2 - 1) <= 1) { return; }

            for (int i = 1; i < points.Count; i++)
            {
                if (i % 2 == 1 || i >= points.Count - 3) { continue; }
                List<double> Cpoints = new List<double>();
                calculatecurve(i, (double)PRadius[i / 2], out Cpoints);
                PCurves.AddRange(Cpoints);
                //System.Diagnostics.Trace.WriteLine(PRadius[i / 2].ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));
            }
            // System.Diagnostics.Trace.WriteLine(PCurves.Count.ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));


            //////////////////////////////////////////


            _path = KSETextBox.Text;
            if (File.Exists(_path))
            {
                ReadPathButton.Text = "Dosya bulundu";
                readText = File.ReadAllText(_path);
                globalnameKSE = _path.Split('\\')[_path.Split('\\').Length - 1];
            }
            else { ReadPathButton.Text = "Dosya yok"; return; }
            readData = readText.Split('\n');
            Kesit tempKesit;
            kesitler = new List<Kesit>();
            for (int i = 0; i < readData.Length; i++)
            {
                readData[i] = readData[i].Replace(".", ",");
                readData[i] = System.Text.RegularExpressions.Regex.Replace(readData[i], @"\s+", "*");
                if (readData[i].StartsWith("2")) { continue; }
                else if (readData[i].StartsWith("*1"))
                {
                    string[] Kbuffer = readData[i].Split('*');
                    tempKesit = new Kesit(float.Parse(Kbuffer[3]));
                    kesitler.Add(tempKesit);
                }
                else if (readData[i].StartsWith("*0"))
                {
                    string[] Pbuffer = readData[i].Split('*');

                    kesitler[kesitler.Count - 1].addToList(double.Parse(Pbuffer[2]), double.Parse(Pbuffer[3]), Pbuffer[4]);
                }




            }

            /*EKSform = new FormPopup();
            EKSform.Text = "EKS";
            EKSform.SetKesitler(kesitler);
            EKSform.Show(this);*/


            updateGraphic();








        }



        private int read_file()
        {
            string _path = PathTextBox.Text;
            string readText;
            if (File.Exists(_path))
            {
                ReadPathButton.Text = "Dosya bulundu";
                readText = File.ReadAllText(_path);
                globalname = _path.Split('\\')[_path.Split('\\').Length - 1];
            }
            else { ReadPathButton.Text = "Dosya yok"; return 0; }
            string[] readData = readText.Split('\n');
            bool getpoints = false;
            bool _KMO = false;
            bool _dusey = false;
            int eklenti = 0;

            List<string> pointsTextArray = new List<string>();
            points = new List<double>();
            PCurves = new List<double>();

            for (int i = 0; i < readData.Length; i++)
            {
                if (readData[i].StartsWith("$KM0")) { _KMO = true; continue; }
                if (readData[i].StartsWith("$YATAY")) { getpoints = true; continue; }
                if (readData[i].StartsWith("$DUSEY")) { _dusey = true; continue; }
                if (readData[i].StartsWith("$SON")) { getpoints = false; _KMO = false; _dusey = false; continue; }
                if (getpoints)
                {
                    pointsTextArray.Add(readData[i]);
                }
                if (_KMO)
                {
                    readData[i] = readData[i].Replace('.', ',');

                    KMO = double.Parse(readData[i]);
                }
                if (_dusey)
                {
                    eklenti = 0;
                    readData[i] = readData[i].Replace('.', ',');
                    readData[i] = System.Text.RegularExpressions.Regex.Replace(readData[i], @"\s+", "*");
                    string[] _Dbuffer = readData[i].Split('*');
                    if (_Dbuffer[0].Equals("")) eklenti = 1;
                    for (int t = 0 + eklenti; t < 3 + eklenti; t++)
                    {
                        DuseyPoints.Add(double.Parse(_Dbuffer[t]));
                    }

                }

            }
            for (int i = 0; i < pointsTextArray.Count; i++)
            {
                string data = pointsTextArray[i];
                data = data.Replace('.', ',');
                string[] dataarr;
                dataarr = data.Split(' ');
                points.Add(double.Parse(dataarr[2]));
                points.Add(double.Parse(dataarr[1]));

                if (dataarr[3] == null) { PRadius.Add(0.0f); } else { PRadius.Add(float.Parse(dataarr[3])); }

            }
            //points = new PointF[readData.Length - 1];
            double basx = points[0];
            X_offset = points[0];
            double basy = points[1];
            Y_offset = points[1];

            for (int i = 2; i < points.Count - 1; i += 2)
            {
                points[i] = points[i] - basx;
                points[i + 1] = points[i + 1] - basy;
            }
            points[0] = 0;
            points[1] = 0;

            if ((points.Count / 2 - 1) <= 1) { return 0; }

            for (int i = 1; i < points.Count; i++)
            {
                if (i % 2 == 1 || i >= points.Count - 3) { continue; }
                List<double> Cpoints = new List<double>();
                calculatecurve(i, (double)PRadius[i / 2], out Cpoints);
                PCurves.AddRange(Cpoints);
                //System.Diagnostics.Trace.WriteLine(PRadius[i / 2].ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));
            }
            // System.Diagnostics.Trace.WriteLine(PCurves.Count.ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));


            //////////////////////////////////////////


            _path = KSETextBox.Text;
            if (File.Exists(_path))
            {
                ReadPathButton.Text = "Dosya bulundu";
                readText = File.ReadAllText(_path);
                globalnameKSE = _path.Split('\\')[_path.Split('\\').Length - 1];
            }
            else { ReadPathButton.Text = "Dosya yok"; return 0; }
            readData = readText.Split('\n');
            Kesit tempKesit;
            kesitler = new List<Kesit>();
            for (int i = 0; i < readData.Length; i++)
            {
                readData[i] = readData[i].Replace(".", ",");
                readData[i] = System.Text.RegularExpressions.Regex.Replace(readData[i], @"\s+", "*");
                if (readData[i].StartsWith("2")) { continue; }
                else if (readData[i].StartsWith("*1"))
                {
                    string[] Kbuffer = readData[i].Split('*');
                    tempKesit = new Kesit(float.Parse(Kbuffer[3]));
                    kesitler.Add(tempKesit);
                }
                else if (readData[i].StartsWith("*0"))
                {
                    string[] Pbuffer = readData[i].Split('*');

                    kesitler[kesitler.Count - 1].addToList(double.Parse(Pbuffer[2]), double.Parse(Pbuffer[3]), Pbuffer[4]);
                }




            }

            EKSform = new FormPopup();
            EKSform.Text = "EKS";
            EKSform.SetKesitler(kesitler);
            EKSform.Show(this);



            updateGraphic();



            return 1;




        }

        private void PathTextBox_TextChanged(object sender, EventArgs e)
        {

        }
        void normalizeVector(double InX, double InY, double l, out double Ox, out double Oy)
        {
            double d0 = Math.Sqrt(InX * InX + InY * InY);
            Ox = InX / d0 * l;
            Oy = InY / d0 * l;
        }


        private void write_file()
        {
            double anlikuzunluk = KMO;
            XDocument maindocument = new XDocument();
            XElement landxml = new XElement("LandXml");

            XElement units = new XElement("Units");
            XElement metric = new XElement("Metric");
            metric.SetAttributeValue("areaUnit", "squareMeter");
            metric.SetAttributeValue("linearUnit", "meter");
            metric.SetAttributeValue("volumeUnit", "cubicMeter");
            metric.SetAttributeValue("temperatureUnit", "celsius");
            metric.SetAttributeValue("pressureUnit", "milliBars");
            metric.SetAttributeValue("diameterUnit", "millimeter");
            metric.SetAttributeValue("angularUnit", "decimal degrees");
            metric.SetAttributeValue("directionUnit", "decimal degrees");
            units.Add(metric);
            landxml.Add(units);



            XElement application = new XElement("Application");
            application.SetAttributeValue("name", "HALFSTAR");
            application.SetAttributeValue("desc", "InterSan");
            application.SetAttributeValue("version", "1.0.99");
            application.SetAttributeValue("manufacturerURL", "www.intersanyazilim.com");
            landxml.Add(application);


            XElement project = new XElement("Project");
            project.SetAttributeValue("name", "Project.map");
            landxml.Add(project);

            XElement alignments = new XElement("Alignments");

            XElement alignment = new XElement("Alignment");


            XElement coordgeom = new XElement("CoordGeom");
            XElement line = new XElement("Line");
            line.Add(new XElement("Start", X_offset.ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + " " + Y_offset.ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture)));
            line.Add(new XElement("End", (PCurves[0] + X_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + " " + (PCurves[1] + Y_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture)));
            line.SetAttributeValue("staStart", anlikuzunluk.ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));
            line.SetAttributeValue("length", uzaklikHesapla(PCurves[0] + X_offset, (PCurves[1] + Y_offset), X_offset, Y_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));
            anlikuzunluk = anlikuzunluk + uzaklikHesapla(PCurves[0] + X_offset, (PCurves[1] + Y_offset), X_offset, Y_offset);
            coordgeom.Add(line);
            XElement curve = new XElement("Curve");
            int lcounter = 0;
            for (int i = 0; i < PCurves.Count - 6; i += 6)
            {
                curve = new XElement("Curve");
                curve.Add(new XElement("Start", (PCurves[i] + X_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + " " + (PCurves[i + 1] + Y_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture)));
                curve.Add(new XElement("End", (PCurves[i + 4] + X_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + " " + (PCurves[i + 5] + Y_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture)));
                curve.Add(new XElement("Center", (PCurves[i + 2] + X_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + " " + (PCurves[i + 3] + Y_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture)));
                curve.SetAttributeValue("staStart", anlikuzunluk.ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));
                curve.SetAttributeValue("crvType", "arc");
                curve.SetAttributeValue("rot", C_Cws[lcounter] ? "cw" : "ccw");
                curve.SetAttributeValue("radius", PRadius[lcounter + 1].ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));
                curve.SetAttributeValue("length", Clenghts[lcounter].ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));
                anlikuzunluk += Clenghts[lcounter];
                lcounter++;
                if (!(PCurves[i + 2] + X_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture).Equals("NaN"))
                {
                    coordgeom.Add(curve);
                }
                line = new XElement("Line");
                line.Add(new XElement("Start", (PCurves[i + 4] + X_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + " " + (PCurves[i + 5] + Y_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture)));
                line.Add(new XElement("End", (PCurves[i + 6] + X_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + " " + (PCurves[i + 7] + Y_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture)));
                line.SetAttributeValue("staStart", anlikuzunluk.ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));
                line.SetAttributeValue("length", uzaklikHesapla(PCurves[i + 6], (PCurves[i + 7]), PCurves[i + 4], PCurves[i + 5]).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));
                anlikuzunluk += uzaklikHesapla(PCurves[i + 6], (PCurves[i + 7]), PCurves[i + 4], PCurves[i + 5]);
                coordgeom.Add(line);


            }
            int j = PCurves.Count - 6;
            curve = new XElement("Curve");
            curve.Add(new XElement("Start", (PCurves[j] + X_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + " " + (PCurves[j + 1] + Y_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture)));
            curve.Add(new XElement("End", (PCurves[j + 4] + X_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + " " + (PCurves[j + 5] + Y_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture)));
            curve.Add(new XElement("Center", (PCurves[j + 2] + X_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + " " + (PCurves[j + 3] + Y_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture)));
            curve.SetAttributeValue("staStart", anlikuzunluk.ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture)); anlikuzunluk += Clenghts[lcounter];
            curve.SetAttributeValue("crvType", "arc");
            curve.SetAttributeValue("rot", C_Cws[lcounter] ? "cw" : "ccw");
            curve.SetAttributeValue("radius", PRadius[lcounter + 1].ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));
            curve.SetAttributeValue("length", Clenghts[lcounter].ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));
            if (!(PCurves[j + 2] + X_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture).Equals("NaN"))
            {
                coordgeom.Add(curve);
            }
            line = new XElement("Line");
            line.Add(new XElement("Start", (PCurves[j + 4] + X_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + " " + (PCurves[j + 5] + Y_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture)));
            line.Add(new XElement("End", ((points[points.Count - 2] + X_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + " " + (points[points.Count - 1] + Y_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture))));
            line.SetAttributeValue("staStart", anlikuzunluk.ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));
            line.SetAttributeValue("length", uzaklikHesapla(points[points.Count - 2], points[points.Count - 1], PCurves[j + 4], (PCurves[j + 5])).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));

            anlikuzunluk += uzaklikHesapla(points[points.Count - 2], points[points.Count - 1], PCurves[j + 4], (PCurves[j + 5]));
            coordgeom.Add(line);

            alignment.SetAttributeValue("name", globalname);
            alignment.SetAttributeValue("length", (anlikuzunluk - KMO).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));
            alignment.SetAttributeValue("staStart", KMO.ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));
            alignment.Add(coordgeom);

            XElement profile = new XElement("Profile");
            XElement profalign = new XElement("ProfAlign");
            profalign.SetAttributeValue("name", globalname);
            XElement pvi;
            XElement paracurve;
            for (int u = 0; u <= DuseyPoints.Count - 3; u += 3)
            {
                if (DuseyPoints[u + 2] == 0)
                {
                    pvi = new XElement("PVI", DuseyPoints[u].ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + " " + DuseyPoints[u + 1].ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));
                    profalign.Add(pvi);
                }
                else
                {
                    paracurve = new XElement("ParaCurve", DuseyPoints[u].ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + " " + DuseyPoints[u + 1].ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));
                    paracurve.SetAttributeValue("length", DuseyPoints[u + 2].ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));
                    profalign.Add(paracurve);
                }

            }

            profile.Add(profalign);
            alignment.Add(profile);


            XElement crosssects = new XElement("CrossSects");
            XElement crosssect;
            XElement crosssectsurf;
            XElement pntlist2d;
            XElement featureN;
            XElement featureC;
            XElement featureI;
            string kesitlerinnoktalari = "";
            string kesitlerinisimleri = "";
            string kesitlerinbaglantilari = "";
            for (int k = 0; k < kesitler.Count; k++)
            {
                crosssect = new XElement("CrossSect");
                crosssect.SetAttributeValue("sta", kesitler[k].baslangic.ToString("0.000", System.Globalization.CultureInfo.CurrentUICulture));

                crosssectsurf = new XElement("CrossSectSurf");
                crosssectsurf.SetAttributeValue("name", globalnameKSE);
                kesitlerinnoktalari = "";
                kesitlerinisimleri = "";
                kesitlerinbaglantilari = "";
                for (int p = 0; p < kesitler[k].kesitPoints.Count; p++)
                {

                    kesitlerinnoktalari = kesitlerinnoktalari + kesitler[k].kesitPoints[p].pointx.ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + " " +
                        kesitler[k].kesitPoints[p].pointy.ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + " ";

                    kesitlerinisimleri = kesitlerinisimleri + kesitler[k].kesitPoints[p].kesitName + ",";

                    if (k != 0)
                    {

                        for (int pp = 0; pp < kesitler[k - 1].kesitPoints.Count; pp++)
                        {
                            if (kesitler[k].kesitPoints[p].kesitName.Equals(kesitler[k - 1].kesitPoints[pp].kesitName))
                            {
                                kesitlerinbaglantilari = kesitlerinbaglantilari + kesitler[k].kesitPoints[p].kesitName + "," + kesitler[k - 1].kesitPoints[pp].kesitName + ",";
                                break;
                            }
                        }

                    }
                }
                pntlist2d = new XElement("PntList2D", kesitlerinnoktalari.Remove(kesitlerinnoktalari.Length - 1, 1));
                featureN = new XElement("Feature", kesitlerinisimleri.Remove(kesitlerinisimleri.Length - 1, 1));
                featureN.SetAttributeValue("code", "RR Vertex Name");


                crosssectsurf.Add(pntlist2d);
                crosssectsurf.Add(featureN);

                if (k != 0)
                {

                    featureC = new XElement("Feature");
                    featureC.SetAttributeValue("code", "RR Vertex Connections");

                    featureI = new XElement("Feature", kesitlerinbaglantilari.Remove(kesitlerinbaglantilari.Length - 1, 1));
                    featureI.SetAttributeValue("code", "RR Vertex Interpolate");

                    crosssectsurf.Add(featureC);
                    featureC.Add(featureI);
                }
                crosssect.Add(crosssectsurf);
                crosssects.Add(crosssect);
            }

            alignment.Add(crosssects);
            alignments.Add(alignment);
            landxml.Add(alignments);
            maindocument.Add(landxml);
            maindocument.Save("landxml.xml");


            //this.Close();
            return;

        }

        private void Write_Xml(object sender, EventArgs e)
        {
            write_file();
        }
        //    double anlikuzunluk = KMO;
        //    XDocument maindocument = new XDocument();
        //    XElement landxml = new XElement("LandXml");

        //    XElement units = new XElement("Units");
        //    XElement metric = new XElement("Metric");
        //    metric.SetAttributeValue("areaUnit", "squareMeter");
        //    metric.SetAttributeValue("linearUnit", "meter");
        //    metric.SetAttributeValue("volumeUnit", "cubicMeter");
        //    metric.SetAttributeValue("temperatureUnit", "celsius");
        //    metric.SetAttributeValue("pressureUnit", "milliBars");
        //    metric.SetAttributeValue("diameterUnit", "millimeter");
        //    metric.SetAttributeValue("angularUnit", "decimal degrees");
        //    metric.SetAttributeValue("directionUnit", "decimal degrees");
        //    units.Add(metric);
        //    landxml.Add(units);



        //    XElement application = new XElement("Application");
        //    application.SetAttributeValue("name", "HALFSTAR");
        //    application.SetAttributeValue("desc", "InterSan");
        //    application.SetAttributeValue("version", "1.0.99");
        //    application.SetAttributeValue("manufacturerURL", "www.intersanyazilim.com");
        //    landxml.Add(application);


        //    XElement project = new XElement("Project");
        //    project.SetAttributeValue("name", "Project.map");
        //    landxml.Add(project);

        //    XElement alignments = new XElement("Alignments");

        //    XElement alignment = new XElement("Alignment");


        //    XElement coordgeom = new XElement("CoordGeom");
        //    XElement line = new XElement("Line");
        //    line.Add(new XElement("Start", X_offset.ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + " " + Y_offset.ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture)));
        //    line.Add(new XElement("End", (PCurves[0] + X_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + " " + (PCurves[1] + Y_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture)));
        //    line.SetAttributeValue("staStart", anlikuzunluk.ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));
        //    line.SetAttributeValue("length", uzaklikHesapla(PCurves[0] + X_offset, (PCurves[1] + Y_offset), X_offset, Y_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));
        //    anlikuzunluk = anlikuzunluk + uzaklikHesapla(PCurves[0] + X_offset, (PCurves[1] + Y_offset), X_offset, Y_offset);
        //    coordgeom.Add(line);
        //    XElement curve = new XElement("Curve");
        //    int lcounter = 0;
        //    for (int i = 0; i < PCurves.Count - 6; i += 6)
        //    {
        //        curve = new XElement("Curve");
        //        curve.Add(new XElement("Start", (PCurves[i] + X_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + " " + (PCurves[i + 1] + Y_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture)));
        //        curve.Add(new XElement("End", (PCurves[i + 4] + X_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + " " + (PCurves[i + 5] + Y_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture)));
        //        curve.Add(new XElement("Center", (PCurves[i + 2] + X_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + " " + (PCurves[i + 3] + Y_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture)));
        //        curve.SetAttributeValue("staStart", anlikuzunluk.ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));
        //        curve.SetAttributeValue("crvType", "arc");
        //        curve.SetAttributeValue("rot", C_Cws[lcounter] ? "cw" : "ccw");
        //        curve.SetAttributeValue("radius", PRadius[lcounter+1].ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));
        //        curve.SetAttributeValue("length", Clenghts[lcounter].ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));
        //        anlikuzunluk += Clenghts[lcounter];
        //        lcounter++;
        //        if (!(PCurves[i + 2] + X_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture).Equals("NaN"))
        //        {
        //            coordgeom.Add(curve);
        //        }
        //        line = new XElement("Line");
        //        line.Add(new XElement("Start", (PCurves[i + 4] + X_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + " " + (PCurves[i + 5] + Y_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture)));
        //        line.Add(new XElement("End", (PCurves[i + 6] + X_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + " " + (PCurves[i + 7] + Y_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture)));
        //        line.SetAttributeValue("staStart", anlikuzunluk.ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));
        //        line.SetAttributeValue("length", uzaklikHesapla(PCurves[i + 6], (PCurves[i + 7]), PCurves[i + 4], PCurves[i + 5]).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));
        //        anlikuzunluk += uzaklikHesapla(PCurves[i + 6], (PCurves[i + 7]), PCurves[i + 4], PCurves[i + 5]);
        //        coordgeom.Add(line);

                
        //    }
        //    int j = PCurves.Count - 6;
        //    curve = new XElement("Curve");
        //    curve.Add(new XElement("Start", (PCurves[j] + X_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + " " + (PCurves[j + 1] + Y_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture)));
        //    curve.Add(new XElement("End", (PCurves[j + 4] + X_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + " " + (PCurves[j + 5] + Y_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture)));
        //    curve.Add(new XElement("Center", (PCurves[j + 2] + X_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + " " + (PCurves[j + 3] + Y_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture)));
        //    curve.SetAttributeValue("staStart", anlikuzunluk.ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture)); anlikuzunluk += Clenghts[lcounter];
        //    curve.SetAttributeValue("crvType", "arc");
        //    curve.SetAttributeValue("rot", C_Cws[lcounter] ? "cw" : "ccw");
        //    curve.SetAttributeValue("radius", PRadius[lcounter + 1].ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));
        //    curve.SetAttributeValue("length", Clenghts[lcounter].ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));
        //    if (!(PCurves[j + 2] + X_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture).Equals("NaN"))
        //    {
        //        coordgeom.Add(curve);
        //    }
        //    line = new XElement("Line");
        //    line.Add(new XElement("Start", (PCurves[j + 4] + X_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + " " + (PCurves[j + 5] + Y_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture)));
        //    line.Add(new XElement("End", ((points[points.Count - 2] + X_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + " " + (points[points.Count - 1] + Y_offset).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture))));
        //    line.SetAttributeValue("staStart", anlikuzunluk.ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));
        //    line.SetAttributeValue("length", uzaklikHesapla(points[points.Count - 2], points[points.Count - 1], PCurves[j + 4], (PCurves[j + 5])).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));

        //    anlikuzunluk += uzaklikHesapla(points[points.Count - 2], points[points.Count - 1], PCurves[j + 4], (PCurves[j + 5]));
        //    coordgeom.Add(line);

        //    alignment.SetAttributeValue("name", globalname);
        //    alignment.SetAttributeValue("length", (anlikuzunluk - KMO).ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));
        //    alignment.SetAttributeValue("staStart", KMO.ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));
        //    alignment.Add(coordgeom);

        //    XElement profile = new XElement("Profile");
        //    XElement profalign = new XElement("ProfAlign");
        //    profalign.SetAttributeValue("name", globalname);
        //    XElement pvi;
        //    XElement paracurve;
        //    for (int u = 0; u <= DuseyPoints.Count - 3; u += 3)
        //    {
        //        if (DuseyPoints[u + 2] == 0)
        //        {
        //            pvi = new XElement("PVI", DuseyPoints[u].ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + " " + DuseyPoints[u + 1].ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));
        //            profalign.Add(pvi);
        //        }
        //        else
        //        {
        //            paracurve = new XElement("ParaCurve", DuseyPoints[u].ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + " " + DuseyPoints[u + 1].ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));
        //            paracurve.SetAttributeValue("length", DuseyPoints[u + 2].ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));
        //            profalign.Add(paracurve);
        //        }

        //    }

        //    profile.Add(profalign);
        //    alignment.Add(profile);


        //    XElement crosssects = new XElement("CrossSects");
        //    XElement crosssect;
        //    XElement crosssectsurf;
        //    XElement pntlist2d;
        //    XElement featureN;
        //    XElement featureC;
        //    XElement featureI;
        //    string kesitlerinnoktalari = "";
        //    string kesitlerinisimleri = "";
        //    string kesitlerinbaglantilari = "";
        //    for (int k = 0; k < kesitler.Count; k++)
        //    {
        //        crosssect = new XElement("CrossSect");
        //        crosssect.SetAttributeValue("sta", kesitler[k].baslangic.ToString("0.000", System.Globalization.CultureInfo.CurrentUICulture));

        //        crosssectsurf = new XElement("CrossSectSurf");
        //        crosssectsurf.SetAttributeValue("name", globalnameKSE);
        //        kesitlerinnoktalari = "";
        //        kesitlerinisimleri = "";
        //        kesitlerinbaglantilari = "";
        //        for (int p = 0; p < kesitler[k].kesitPoints.Count; p++)
        //        {

        //            kesitlerinnoktalari = kesitlerinnoktalari + kesitler[k].kesitPoints[p].pointx.ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + " " +
        //                kesitler[k].kesitPoints[p].pointy.ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + " ";

        //            kesitlerinisimleri = kesitlerinisimleri + kesitler[k].kesitPoints[p].kesitName + ",";

        //            if (k != 0)
        //            {

        //                for (int pp = 0; pp < kesitler[k - 1].kesitPoints.Count; pp++)
        //                {
        //                    if (kesitler[k].kesitPoints[p].kesitName.Equals(kesitler[k - 1].kesitPoints[pp].kesitName))
        //                    {
        //                        kesitlerinbaglantilari = kesitlerinbaglantilari + kesitler[k].kesitPoints[p].kesitName + "," + kesitler[k - 1].kesitPoints[pp].kesitName + ",";
        //                        break;
        //                    }
        //                }

        //            }
        //        }
        //        pntlist2d = new XElement("PntList2D", kesitlerinnoktalari.Remove(kesitlerinnoktalari.Length - 1, 1));
        //        featureN = new XElement("Feature", kesitlerinisimleri.Remove(kesitlerinisimleri.Length - 1, 1));
        //        featureN.SetAttributeValue("code", "RR Vertex Name");


        //        crosssectsurf.Add(pntlist2d);
        //        crosssectsurf.Add(featureN);

        //        if (k != 0)
        //        {

        //            featureC = new XElement("Feature");
        //            featureC.SetAttributeValue("code", "RR Vertex Connections");

        //            featureI = new XElement("Feature", kesitlerinbaglantilari.Remove(kesitlerinbaglantilari.Length - 1, 1));
        //            featureI.SetAttributeValue("code", "RR Vertex Interpolate");

        //            crosssectsurf.Add(featureC);
        //            featureC.Add(featureI);
        //        }
        //        crosssect.Add(crosssectsurf);
        //        crosssects.Add(crosssect);
        //    }

        //    alignment.Add(crosssects);
        //    alignments.Add(alignment);
        //    landxml.Add(alignments);
        //    maindocument.Add(landxml);
        //    maindocument.Save("landxml.xml");



        //}

        double uzaklikHesapla(double x1, double y1, double x2, double y2)
        {
            return Math.Sqrt(Math.Pow((x2 - x1), 2) + Math.Pow((y2 - y1), 2));


        }

        private void Form1_DragDrop(object sender, DragEventArgs e)
        {

        }
        private void OutText_TextChanged(object sender, EventArgs e)
        {

        }

        private void richTextBox1_TextChanged(object sender, EventArgs e)
        {

        }

        private void label3_Click(object sender, EventArgs e)
        {

        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
         
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            starter();
        }

        void calculatecurve(int Pindex, double rad, out List<double> O_points)
        {
            O_points = new List<double>();
            double Xa = points[Pindex - 2];
            double Xb = points[Pindex];
            double Xc = points[Pindex + 2];
            double Ya = points[Pindex - 1];
            double Yb = points[Pindex + 1];
            double Yc = points[Pindex + 3];
            double v1x = Xc - Xb;
            double v1y = Yc - Yb;
            double v2x = Xa - Xb;
            double v2y = Ya - Yb;
            double v3x = Xb - Xa;
            double v3y = Yb - Ya;
            bool _cw = false;
            double angle = Math.Atan2(v1x, v1y) - Math.Atan2(v2x, v2y);
            double nextangle = Math.Atan2(v1x, v1y) - Math.Atan2(v3x, v3y);
            if (nextangle < 0) _cw = true;
            angle = angle * (180 / Math.PI);
            //System.Diagnostics.Trace.Write(angle.ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + "////");
            if (angle > 360)
            {
                angle = 360 - angle;
            }
            if (angle >= 0) angle = 180 - angle;
            else { angle = angle + 180; /*_cw = false; */}
            Clenghts.Add(Math.Abs(2 * Math.PI * rad * angle / 360));
            //if (Clenghts[Clenghts.Count - 1] < 0) { _cw = false; }

            
            /*System.Diagnostics.Trace.Write(_cw + "////");
            System.Diagnostics.Trace.WriteLine(Clenghts[Clenghts.Count - 1].ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));*/




           /* double dot = ((Xb - Xa) * (Xc - Xb)) + ((Yb - Ya) * (Yc - Yb));
            _cw = true;
            if (dot <= 0) { _cw = false; }
            */
            C_Cws.Add(_cw);
            System.Diagnostics.Trace.WriteLine(nextangle.ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + " " + (_cw ? "cw" : "ccw" ));




            double os = rad / Math.Cos(angle / 2 * Math.PI / 180);
            double t = Math.Pow(os, 2) - Math.Pow(rad, 2);
            t = Math.Sqrt(t);
            //System.Diagnostics.Trace.WriteLine(os.ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture));

            label2.Text = t.ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture);


            double _X = points[Pindex] - points[Pindex - 2];
            double _Y = points[Pindex + 1] - points[Pindex - 1];

            double _X2 = points[Pindex + 2] - points[Pindex];
            double _Y2 = points[Pindex + 3] - points[Pindex + 1];

            normalizeVector(_X, _Y, t, out _X, out _Y);
            normalizeVector(_X2, _Y2, t, out _X2, out _Y2);




            _X2 = points[Pindex] + _X2;
            _Y2 = points[Pindex + 1] + _Y2;

            _X = points[Pindex] - _X;
            _Y = points[Pindex + 1] - _Y;


            //Orta nokta
            double CX = (_X + _X2) / 2;
            double CY = (_Y + _Y2) / 2;
            CX = CX - points[Pindex];
            CY = CY - points[Pindex + 1];
            normalizeVector(CX, CY, Math.Abs(os), out CX, out CY);
            CX = CX + points[Pindex];
            CY = CY + points[Pindex + 1];

            O_points.Add(_X);
            O_points.Add(_Y);
            O_points.Add(CX);
            O_points.Add(CY);
            O_points.Add(_X2);
            O_points.Add(_Y2);
            label3.Text = _X.ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + " --- " + _Y.ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + "  " + X_offset.ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture);
            //richTextBox2.Text = richTextBox2.Text + "\n" + _X.ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture) + "\n" + _Y.ToString("0.000000", System.Globalization.CultureInfo.CurrentUICulture);

        }
    }
}
